version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskapi_postgres
    environment:
      POSTGRES_DB: taskapi
      POSTGRES_USER: taskuser
      POSTGRES_PASSWORD: taskpass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./scripts/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskuser -d taskapi"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskapi_network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: taskapi_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskapi_network

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: taskapi_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@taskapi.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskapi_network

  # Application (for development)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: taskapi_app
    environment:
      - DATABASE_URL=postgres://taskuser:taskpass@postgres:5432/taskapi?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - PORT=8088
      - APP_ENV=development
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - LOG_LEVEL=debug
    ports:
      - "8088:8088"
    volumes:
      - .:/app
      - /app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskapi_network
    command: air # Hot reload for development

  # Database migration service
  migrate:
    image: migrate/migrate:latest
    container_name: taskapi_migrate
    volumes:
      - ./migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "postgres://taskuser:taskpass@postgres:5432/taskapi?sslmode=disable",
      "up"
    ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskapi_network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: taskapi_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - taskapi_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: taskapi_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - taskapi_network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:

networks:
  taskapi_network:
    driver: bridge